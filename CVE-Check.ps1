param (
    [Parameter(Mandatory = $true)]
    [string]$cveFilePath,  # Mandatory parameter for the CVE text file path

    [string]$apiKey = ""  # Optional parameter for the API key
)

# API URL to query CVE details (v2.0)
$apiBaseUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0/"

# Create a timestamp for the filename
$timestamp = (Get-Date).ToString("yyyy-MM-dd")
$reportPath = "CVE-Report-$timestamp.txt"  # Report file path
$logFilePath = "CVE-Report-$timestamp.log"  # Log file path

# Maximum number of API retries on errors
$maxRetries = 3

# --- Logging function ---
function Write-Log {
    param (
        [string]$message,
        [string]$level = "Info"  # Default log level is "Info"
    )
    
    # Get the current timestamp
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp [$level] $message"  # Format the log entry
    Add-Content -Path $logFilePath -Value $logEntry  # Write to the log file

    # Control logging levels
    switch ($level) {
        "Debug" {
            if ($level -eq "Debug") {  # Only display debug logs if the level is "Debug"
                Write-Host $logEntry -ForegroundColor Gray
            }
            break
        }
        "Info" {
            Write-Host $logEntry  # Display info logs
            break
        }
        "Error" {
            Write-Host $logEntry -ForegroundColor Red  # Display error logs in red
            break
        }
    }
}

# Read CVE IDs from the specified file
$cveLines = Get-Content -Path $cveFilePath

# Initialize an empty list for CVE entries
$cveList = @()
$currentLibrary = ""

# Process each line in the CVE file
foreach ($line in $cveLines) {
    # Check if the line specifies a library (ends with .jar)
    if ($line -match "\.jar$") {
        $currentLibrary = $line  # Store the current library name
    }
    # Check if the line is a CVE ID (starts with CVE-)
    elseif ($line -match "^CVE-") {
        # Add the CVE entry to the list
        $cveList += [pscustomobject]@{
            Library = $currentLibrary  # Associate the CVE with the current library
            CVE     = $line  # Store the CVE ID
        }
    }
}

# Initialize report content
$reportContent = @()
$reportHeader = @"
Vulnerability Report
________________________________________


"@

# Safely retrieve CVE data
foreach ($entry in $cveList) {
    $cve = $entry.CVE  # Get the CVE ID
    $library = $entry.Library  # Get the associated library name

    # Create the URL for the API request (v2.0 uses cveId as a parameter)
    $cveUrl = $apiBaseUrl + "/?cveId=$cve"
    
    # Prepare headers for the API request
    $headers = @{}
    if (-not [string]::IsNullOrEmpty($apiKey)) {
        $headers["apiKey"] = $apiKey  # Include the API key if provided
    }

    try {
        Write-Log -message "Starting API request for CVE: $cve at URL: $cveUrl" -level "Debug"
        
        # Retrieve data from the API
        $response = Invoke-WebRequest -Uri $cveUrl -Headers $headers -UseBasicParsing -ErrorAction Stop
        
        # Check if the response is empty
        if (-not $response.Content) {
            throw "Empty response from the API for CVE $cve"  # Raise an error if empty
        }
        Write-Log -message "Response from the API for $cve : available" -level "Info"

        # Attempt to parse the response as JSON
        try {
            $cveData = $response.Content | ConvertFrom-Json
        } catch {
            throw "Invalid JSON received for $cve"  # Raise an error if JSON is invalid
        }

        # Check if the data structure is valid and data is present
        if (-not $cveData.vulnerabilities -or $cveData.vulnerabilities.Count -eq 0) {
            throw "No CVE data found for $cve."  # Raise an error if no data found
        }

        # Extract CVSS score and other relevant details
        $vulnDetails = $cveData.vulnerabilities[0].cve.metrics.cvssMetricV31[0].cvssData
        if (-not $vulnDetails) {
            throw "No CVSS data found for CVE $cve."  # Raise an error if CVSS data is missing
        }
        
        # Store extracted data
        $cvssScore = $vulnDetails.baseScore
        $severity = $vulnDetails.baseSeverity
        $attackVector = $vulnDetails.attackVector
        $attackComplexity = $vulnDetails.attackComplexity
        $privilegesRequired = $vulnDetails.privilegesRequired
        $userInteraction = $vulnDetails.userInteraction
        $scope = $vulnDetails.scope
        $confidentialityImpact = $vulnDetails.confidentialityImpact
        $integrityImpact = $vulnDetails.integrityImpact
        $availabilityImpact = $vulnDetails.availabilityImpact
        
        # Extract and clean description
        $descriptionData = $cveData.vulnerabilities[0].cve.descriptions
        if (-not $descriptionData -or $descriptionData.Count -eq 0) {
            throw "No description found for CVE $cve."  # Raise an error if description is missing
        }
        $description = $descriptionData[0].value

        # Remove new lines at the end of the description and reduce whitespaces
        $description = $description -replace "`r`n", " "
        $description = $description -replace "\s{2,}", " "

        # Recommended actions (example only, please adjust)

        # Format data and add to report
        $reportContent += @"

        
Library: $library
CVE: $cve
Description: $description
Severity: $severity (CVSS v3.1: $cvssScore)
Attack Vector: $attackVector
Attack Complexity: $attackComplexity
Privileges Required: $privilegesRequired
User Interaction: $userInteraction
Scope: $scope
Confidentiality Impact: $confidentialityImpact
Integrity Impact: $integrityImpact
Availability Impact: $availabilityImpact

"@
    } catch {
        # Output detailed error message to the log
        Write-Log -message "Error retrieving data for $cve : $_" -level "Error"

        # Add error message to report instead of aborting the script
        $reportContent += @"
Library: $library
CVE: $cve
Description: Error retrieving data. Details: $_
Severity: Not available

"@
        continue
    }
}

# General recommended actions to be included at the end of the report
$generalRecommendations = @"

________________________________________

General recommended actions:
• Regularly update libraries.
• Apply security patches promptly.
• Conduct vulnerability scans during development and testing phases.
"@

# Save report as TXT file
$reportContent = $reportHeader + $reportContent + $generalRecommendations
Set-Content -Path $reportPath -Value $reportContent  # Write report content to file

Write-Log -message "Report successfully created: $reportPath" -level "Info"  # Log success message
